// import { generateApi } from "./generateApi";
import * as fs from 'fs';
import * as path from 'path';

function extractImport(src: string) {
    let url = new URL(src)
    let importPath = url.pathname.split('/');
    let name = importPath[importPath.length - 1].split('.')[0]
    return {
        name,
        path: './' + importPath[importPath.length - 2] + '/' + name
    }
}

function generateTypes() {

    let queries = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../openland-api/queries.json'), 'utf-8')) as {
        operations: {
            filePath: string,
            operationName: string,
            operationType: 'query' | 'mutation' | 'subscription',
            variables: any[]
        }[],
        fragments: {
            fragmentName: string,
            filePath: string
        }[]
    };

    let resContent = '// WARNING! THIS IS AUTOGENERATED FILE. DO NOT EDIT!\n\n';
    resContent += 'import { typedQuery } from \'openland-y-graphql/typed\';\n';
    resContent += 'import { typedMutation } from \'openland-y-graphql/typed\';\n';
    resContent += 'import { typedSubscription } from \'openland-y-graphql/typed\';\n';
    resContent += 'import { typedFragment } from \'openland-y-graphql/typed\';\n';
    resContent += 'import * as Types from \'./Types\';\n';

    let imported = new Set<string>();
    for (let op of queries.operations) {
        if (imported.has(op.filePath)) {
            continue;
        }
        imported.add(op.filePath);
        let p = extractImport(op.filePath)
        resContent += 'import * as ' + p.name + ' from \'' + p.path + '\';\n';
    }
    for (let op of queries.fragments) {
        if (imported.has(op.filePath)) {
            continue;
        }
        imported.add(op.filePath);
        let p = extractImport(op.filePath)
        resContent += 'import * as ' + p.name + ' from \'' + p.path + '\';\n';
    }

    // resContent += processed.map((v) => v.import).join('\n') + '\n';
    resContent += '\n';

    for (let op of queries.operations) {
        let p = extractImport(op.filePath)
        if (op.operationType === 'query') {
            if (op.variables.length > 0) {
                resContent += 'export const ' + op.operationName + 'Query = typedQuery<Types.' + op.operationName + ', Types.' + op.operationName + 'Variables>(' + p.name + '.' + op.operationName + 'Query);\n';
            } else {
                resContent += 'export const ' + op.operationName + 'Query = typedQuery<Types.' + op.operationName + ', {}>(' + p.name + '.' + op.operationName + 'Query);\n';
            }
        } else if (op.operationType === 'mutation') {
            if (op.variables.length > 0) {
                resContent += 'export const ' + op.operationName + 'Mutation = typedMutation<Types.' + op.operationName + ', Types.' + op.operationName + 'Variables>(' + p.name + '.' + op.operationName + 'Mutation);\n';
            } else {
                resContent += 'export const ' + op.operationName + 'Mutation = typedMutation<Types.' + op.operationName + ', {}>(' + p.name + '.' + op.operationName + 'Mutation);\n';
            }
        } else if (op.operationType === 'subscription') {
            if (op.variables.length > 0) {
                resContent += 'export const ' + op.operationName + 'Subscription = typedSubscription<Types.' + op.operationName + ', Types.' + op.operationName + 'Variables>(' + p.name + '.' + op.operationName + 'Subscription);\n';
            } else {
                resContent += 'export const ' + op.operationName + 'Subscription = typedSubscription<Types.' + op.operationName + ', {}>(' + p.name + '.' + op.operationName + 'Subscription);\n';
            }
        }
    }

    for (let op of queries.fragments) {
        let p = extractImport(op.filePath)
        resContent += 'export const ' + op.fragmentName + 'Fragment = typedFragment<Types.' + op.fragmentName + '>(' + p.name + '.' + op.fragmentName + ');\n';
    }

    // resContent += processed.map((v) => v.contents).join('\n');
    fs.writeFileSync(path.resolve(__dirname + '/../openland-api/index.ts'), resContent);
    // generateApi();
}

generateTypes();