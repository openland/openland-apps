query MyCards {
    myCards {
        id
        pmid
        last4
        brand
        expYear
        expMonth
        isDefault
        deleted
    }
}

mutation CreateCardSetupIntent($retryKey: String!) {
    cardCreateSetupIntent(retryKey: $retryKey) {
        id
        clientSecret
    }
}

mutation CommitCardSetupIntent($id: ID!, $pmid: ID!) {
    cardCommitSetupIntent(id: $id, pmid: $pmid) {
        id
    }
}

mutation RemoveCard($id: ID!) {
    cardRemove(id: $id) {
        id
        deleted
    }
}

mutation MakeCardDefault($id: ID!) {
    cardMakeDefault(id: $id) {
        id
        isDefault
    }
}

mutation CreateDepositIntent($cardId: ID!, $amount: Int!, $retryKey: String!) {
    cardDepositIntent(id: $cardId, amount: $amount, retryKey: $retryKey) {
        id
        clientSecret
    }
}

mutation PaymentIntentCommit($id: ID!) {
    paymentIntentCommit(id: $id)
}

mutation PaymentIntentCancel($id: ID!) {
    paymentCancel(id: $id)
}

fragment Payment on Payment {
    id
    status
    card {
        id
        brand
        last4
    }
    intent {
        id
        clientSecret
    }
}

fragment WalletUser on User {
    id
    name
    photo
}

fragment WalletGroup on SharedRoom {
    id
    title
    photo
}

fragment WalletProduct on WalletProduct {
    ... on WalletProductGroup {
        group {
            ...WalletGroup
        }
    }

    ...on WalletProductDonation {
        user {
            ...WalletUser
        }
    }

    ...on WalletProductDonationMessage {
        user {
            ...WalletUser
        }
        chat {
            ... on SharedRoom {
                id
                title
            }
        }
    }
    ...on WalletProductDonationReaction {
        user {
            ...WalletUser
        }
        chat {
            ... on SharedRoom {
                id
                title
            }
        }
    }
}

fragment WalletTransactionFragment on WalletTransaction {
    id
    status
    date
    operation {
        ... on WalletTransactionDeposit {
            amount
            payment {
                ...Payment
            }
        }
        ... on WalletTransactionIncome {
            amount
            payment {
                ...Payment
            }
            source {
                ... on WalletSubscription {
                    id
                    product {
                        ...WalletProduct
                    }
                }
                ... on Purchase {
                    id
                    user {
                        ...WalletUser
                    }
                    product {
                        ...WalletProduct
                    }
                }
            }
        }
        ... on WalletTransactionTransferIn {
            amount
            payment {
                ...Payment
            }
            fromUser {
                ...UserShort
            }
        }
        ... on WalletTransactionTransferOut {
            amount
            walletAmount
            chargeAmount
            payment {
                ...Payment
            }
            toUser {
                ...UserShort
            }
        }
        ... on WalletTransactionSubscription {
            amount
            walletAmount
            chargeAmount
            subscription {
                id
                interval
                amount
                product {
                    ...WalletProduct
                }
            }
            payment {
                ...Payment
            }
        }
        ... on WalletTransactionPurchase {
            amount
            walletAmount
            chargeAmount
            purchase {
                id
                product {
                    ...WalletProduct
                }
            }
            payment {
                ...Payment
            }
        }
    }
}

query MyWallet {
    myWallet {
        id
        balance
        state
        isLocked
        failingPaymentsCount
    }
    transactionsPending {
        ...WalletTransactionFragment
    }
    transactionsHistory(first: 20) {
        items {
            ...WalletTransactionFragment
        }
        cursor
    }
}

query TransactionsHistory($first: Int!, $after: String) {
    transactionsHistory(first: $first, after: $after) {
        items {
            ...WalletTransactionFragment
        }
        cursor
    }
}

fragment WalletUpdateFragment on WalletUpdate {
    ... on WalletUpdateBalance {
        amount
    }
    ... on WalletUpdateLocked {
        isLocked
        failingPaymentsCount
    }
    ... on WalletUpdateTransactionSuccess {
        transaction {
            ...WalletTransactionFragment
        }
    }
    ... on WalletUpdateTransactionCanceled {
        transaction {
            ...WalletTransactionFragment
        }
    }
    ... on WalletUpdateTransactionPending {
        transaction {
            ...WalletTransactionFragment
        }
    }
    ... on WalletUpdatePaymentStatus {
        payment {
            ...Payment
        }
    }
}

subscription WalletUpdates($state: String!) {
    event: walletUpdates(fromState: $state) {
        ... on WalletUpdateSingle {
            state
            update {
                ...WalletUpdateFragment
            }
        }
        ... on WalletUpdateBatch {
            state
            updates {
                ...WalletUpdateFragment
            }
        }
    }
}

query Subscriptions {
    subscriptions {
        id
        state
        expires
        amount
        interval
        product {
            ... on WalletProductGroup {
                group {
                    id
                    title
                    photo
                }
            }
        }
    }
}

mutation CancelSubscription($id: ID!) {
    subscriptionCancel(id: $id) {
        id
    }
}

query StripeToken {
    stripeToken
}

mutation SendDonation($amount: Int!, $chatId: ID, $userId: ID, $message: String, $repeatKey: String) {
    sendDonation(
        chatId: $chatId
        userId: $userId
        amount: $amount
        message: $message
        repeatKey: $repeatKey
    )
}
