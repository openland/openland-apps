fragment ChatUpdateFragment on ChatUpdate {
    ... on ChatMessageReceived {
        message {
            ...FullMessage
        }
        repeatKey
    }
    ... on ChatMessageUpdated {
        message {
            ...FullMessage
        }
    }
    ... on ChatMessageDeleted {
        message {
            id
        }
    }
    ... on ChatUpdated {
        chat {
            ...RoomShort
        }
    }
    ... on ChatLostAccess {
        lostAccess
    }
}
subscription ChatWatch($chatId: ID!, $state: String) {
    event: chatUpdates(chatId: $chatId, fromState: $state) {
        ... on ChatUpdateSingle {
            seq
            state
            update {
                ...ChatUpdateFragment
            }
        }
        ... on ChatUpdateBatch {
            fromSeq
            seq
            state
            updates {
                ...ChatUpdateFragment
            }
        }
    }
}
query Room($id: ID!) {
    room(id: $id) {
        ...RoomFull
    }
}
query RoomPico($id: ID!) {
    room(id: $id) {
        ...RoomNano
    }
}
query RoomChat($id: ID!) {
    room(id: $id) {
        ... on PrivateRoom {
            id
            user {
                id
                name
                photo
                shortname
                primaryOrganization {
                    id
                    name
                }
                isBot
            }
            pinnedMessage {
                ...FullMessage
            }
            settings {
                id
                mute
            }
        }
        ... on SharedRoom {
            id
            kind
            title
            membership
            isChannel
            role
            canEdit
            photo
            membersCount
            organization {
                ...OrganizationMedium
            }
            matchmaking {
                ...MatchmakingRoomFragment
            }
            pinnedMessage {
                ...FullMessage
            }
            settings {
                id
                mute
            }
            description
            onlineMembersCount
            previewMembers {
                id
                photo
                name
            }
            isPremium
            premiumPassIsActive
            premiumSubscription {
                id
                state
            }
            premiumSettings {
                id
                price
                interval
            }
        }
    }
}
query RoomWithoutMembers($id: ID!) {
    room(id: $id) {
        ...RoomFullWithoutMembers
    }
}
query RoomFeaturedMembers($roomId: ID!) {
    roomFeaturedMembers(roomId: $roomId) {
        user {
            ...UserShort
        }
        role
        membership
        canKick
        badge {
            ...UserBadge
        }
    }
}
query RoomTiny($id: ID!) {
    room(id: $id) {
        ...RoomShort
    }
}
query RoomSuper($id: ID!) {
    roomSuper(id: $id) {
        id
        featured
        listed
    }
}
mutation PinMessage($chatId: ID!, $messageId: ID!) {
    pinMessage: gammaPinMessage(chatId: $chatId, messageId: $messageId) {
        ...RoomShort
    }
}
mutation UnpinMessage($chatId: ID!) {
    unpinMessage: gammaUnpinMessage(chatId: $chatId) {
        ...RoomShort
    }
}
mutation MessageSetReaction($messageId: ID!, $reaction: MessageReactionType!) {
    messageReactionAdd(messageId: $messageId, reaction: $reaction)
}
mutation MessageUnsetReaction($messageId: ID!, $reaction: MessageReactionType!) {
    messageReactionRemove(messageId: $messageId, reaction: $reaction)
}
query GlobalCounter {
    alphaNotificationCounter {
        id
        unreadCount
    }
}
query MessagesBatch($chatId: ID!, $first: Int!, $before: ID, $after: ID) {
    gammaMessages(chatId: $chatId, first: $first, before: $before, after: $after) {
        messages {
            ...FullMessage
        }
        haveMoreForward
        haveMoreBackward
    }
    state: conversationState(id: $chatId) {
        state
    }
}
query ChatInit($chatId: ID!, $before: ID, $first: Int!) {
    messages(chatId: $chatId, first: $first, before: $before) {
        ...FullMessage
    }
    state: conversationState(id: $chatId) {
        state
    }
    room(id: $chatId) {
        ...RoomShort
    }
    lastReadedMessage(chatId: $chatId) {
        id
    }
}
query ChatInitFromUnread($chatId: ID!, $before: ID, $first: Int!) {
    gammaMessages(chatId: $chatId, first: $first, before: $before) {
        messages {
            ...FullMessage
        }
        haveMoreForward
        haveMoreBackward
    }
    state: conversationState(id: $chatId) {
        state
    }
    room(id: $chatId) {
        ...RoomShort
    }
    lastReadedMessage(chatId: $chatId) {
        id
    }
}
mutation SendMessage(
    $chatId: ID!
    $message: String
    $replyMessages: [ID!]
    $mentions: [MentionInput!]
    $fileAttachments: [FileAttachmentInput!]
    $spans: [MessageSpanInput!]
    $repeatKey: String
) {
    sentMessage: sendMessage(
        chatId: $chatId
        message: $message
        replyMessages: $replyMessages
        mentions: $mentions
        fileAttachments: $fileAttachments
        spans: $spans
        repeatKey: $repeatKey
    )
}
mutation RoomRead($id: ID!, $mid: ID!) {
    roomRead(id: $id, mid: $mid)
}
mutation RoomCreate(
    $kind: SharedRoomKind!
    $members: [ID!]!
    $message: String
    $title: String
    $description: String
    $photoRef: ImageRefInput
    $organizationId: ID
    $channel: Boolean!
    $price: Int
    $interval: WalletSubscriptionInterval
) {
    room: betaRoomCreate(
        kind: $kind
        members: $members
        message: $message
        title: $title
        description: $description
        photoRef: $photoRef
        organizationId: $organizationId
        channel: $channel
        price: $price
        interval: $interval
    ) {
        id
    }
}
mutation BuyPremiumChatSubscription($chatId: ID!) {
    betaBuyPremiumChatSubscription(chatId: $chatId) {
        id
        premiumPassIsActive
        premiumSubscription {
            id
            state
        }
    }
}
mutation SetTyping($conversationId: ID!, $type: TypingType!) {
    typingSend(conversationId: $conversationId, type: $type)
}
mutation UnsetTyping($conversationId: ID!) {
    typingCancel(conversationId: $conversationId)
}
mutation RoomAddMembers($roomId: ID!, $invites: [RoomInviteInput!]!) {
    alphaRoomInvite(roomId: $roomId, invites: $invites) {
        user {
            ...UserShort
        }
        role
        membership
        canKick
        badge {
            ...UserBadge
        }
    }
}
mutation RoomKick($roomId: ID!, $userId: ID!) {
    betaRoomKick(roomId: $roomId, userId: $userId) {
        ...RoomFull
    }
}
mutation RoomChangeRole($roomId: ID!, $userId: ID!, $newRole: RoomMemberRole!) {
    betaRoomChangeRole(roomId: $roomId, userId: $userId, newRole: $newRole) {
        ...RoomFull
    }
}
mutation RoomLeave($roomId: ID!) {
    betaRoomLeave(roomId: $roomId) {
        ...RoomFull
    }
}
query RoomSearch($query: String, $sort: String, $page: Int) {
    items: betaRoomSearch(query: $query, sort: $sort, page: $page, first: 25) {
        edges {
            node {
                ... on SharedRoom {
                    id
                    kind
                    isChannel
                    title
                    photo
                    membership
                    membersCount
                    organization {
                        id
                        photo
                        name
                    }
                }
            }
            cursor
        }
        pageInfo {
            hasNextPage
            hasPreviousPage
            itemsCount
            currentPage
            pagesCount
            openEnded
        }
    }
}
mutation RoomAlterFeatured($roomId: ID!, $featured: Boolean!) {
    betaRoomAlterFeatured(roomId: $roomId, featured: $featured) {
        id
        listed
        featured
    }
}
mutation RoomAlterHidden($roomId: ID!, $listed: Boolean!) {
    betaRoomAlterListed(roomId: $roomId, listed: $listed) {
        id
        listed
        featured
    }
}
query RoomMembersShort($roomId: ID!) {
    members: roomMembers(roomId: $roomId) {
        user {
            id
        }
    }
}
query RoomMembers($roomId: ID!) {
    members: roomMembers(roomId: $roomId) {
        user {
            ...UserShort
        }
        role
        membership
        canKick
    }
}
query RoomMembersTiny($roomId: ID!) {
    members: roomMembers(roomId: $roomId) {
        user {
            id
            name
            shortname
            photo
            primaryOrganization {
                id
                name
            }
        }
    }
}
query ChatMembersSearch($cid: ID!, $query: String, $first: Int!, $after: String) {
    members: chatMembersSearch(cid: $cid, query: $query, first: $first, after: $after) {
        edges {
            user: node {
                id
                name
                shortname
                photo
                primaryOrganization {
                    id
                    name
                }
            }
            cursor
        }
        pageInfo {
            hasNextPage
        }
    }
}
query RoomOrganizationAdminMembers($id: ID!) {
    room(id: $id) {
        ... on SharedRoom {
            id
            organization {
                id
                adminMembers: alphaOrganizationAdminMembers {
                    role
                    user {
                        ...UserShort
                    }
                }
            }
        }
    }
}
query RoomMembersPaginated($roomId: ID!, $first: Int, $after: ID) {
    members: roomMembers(roomId: $roomId, first: $first, after: $after) {
        user {
            ...UserShort
        }
        role
        membership
        canKick
        badge {
            ...UserBadge
        }
    }
}
mutation RoomSettingsUpdate($settings: RoomUserNotificaionSettingsInput!, $roomId: ID!) {
    betaRoomUpdateUserNotificationSettings(settings: $settings, roomId: $roomId) {
        id
        mute
    }
}
mutation RoomJoin($roomId: ID!) {
    join: betaRoomJoin(roomId: $roomId) {
        ... on PrivateRoom {
            id
        }
        ... on SharedRoom {
            id
        }
    }
}
mutation RoomsJoin($roomsIds: [ID!]!) {
    join: betaRoomsJoin(roomsIds: $roomsIds) {
        ... on PrivateRoom {
            id
        }
        ... on SharedRoom {
            id
        }
    }
}
mutation RoomsInviteUser($userId: ID!, $roomIds: [ID!]!) {
    rooms: betaRoomsInviteUser(userId: $userId, roomIds: $roomIds) {
        ...RoomShort
    }
}
mutation RoomJoinInviteLink($invite: String!) {
    join: betaRoomInviteLinkJoin(invite: $invite) {
        ...RoomShort
    }
}
mutation RoomRenewInviteLink($roomId: ID!) {
    link: betaRoomInviteLinkRenew(roomId: $roomId)
}
query RoomInviteLink($roomId: ID!) {
    link: betaRoomInviteLink(roomId: $roomId)
}
query RoomInviteInfo($invite: String!) {
    invite: betaRoomInviteInfo(invite: $invite) {
        id
        room {
            ... on SharedRoom {
                id
                kind
                isChannel
                title
                photo
                socialImage
                description
                organization {
                    ...OrganizationShort
                }
                membership
                membersCount
                onlineMembersCount
                previewMembers {
                    id
                    photo
                    name
                }
                matchmaking {
                    enabled
                }
                isPremium
                premiumPassIsActive
                premiumSubscription {
                    id
                    state
                }
                premiumSettings {
                    id
                    price
                    interval
                }
            }
        }
        invitedByUser {
            ...UserShort
        }
    }
}
query ResolvedInvite($key: String!) {
    invite: alphaResolveInvite(key: $key) {
        __typename
        ... on InviteInfo {
            id
            orgId
            title
            creator {
                ...UserShort
            }
            organization {
                id
                photo
                name
                membersCount
                about
                isCommunity: alphaIsCommunity
            }
        }
        ... on AppInvite {
            inviter {
                ...UserShort
            }
        }
        ... on RoomInvite {
            id
            invitedByUser {
                ...UserShort
            }

            room {
                ... on SharedRoom {
                    id
                    kind
                    isChannel
                    title
                    photo
                    socialImage
                    description
                    membership
                    membersCount
                    onlineMembersCount
                    previewMembers {
                        id
                        photo
                        name
                    }
                    matchmaking {
                        enabled
                    }
                    isPremium
                    premiumPassIsActive
                    premiumSubscription {
                        id
                        state
                    }
                    premiumSettings {
                        id
                        price
                        interval
                    }
                }
            }
        }
    }
}
mutation RoomUpdate($roomId: ID!, $input: RoomUpdateInput!) {
    betaRoomUpdate(roomId: $roomId, input: $input) {
        ... on PrivateRoom {
            id
        }
        ... on SharedRoom {
            id
            title
            photo
            description
            socialImage
        }
    }
}
mutation RoomDeleteMessage($messageId: ID!) {
    betaMessageDelete(mid: $messageId)
}
mutation RoomDeleteMessages($mids: [ID!]!) {
    betaMessageDelete(mids: $mids)
}
mutation RoomDeleteUrlAugmentation($messageId: ID!) {
    betaMessageDeleteAugmentation(mid: $messageId)
}
mutation EditMessage(
    $messageId: ID!
    $message: String
    $replyMessages: [ID!]
    $mentions: [MentionInput!]
    $fileAttachments: [FileAttachmentInput!]
    $spans: [MessageSpanInput!]
) {
    editMessage(
        messageId: $messageId
        message: $message
        replyMessages: $replyMessages
        mentions: $mentions
        fileAttachments: $fileAttachments
        spans: $spans
    )
}
mutation MarkSequenceRead($seq: Int!) {
    alphaGlobalRead(toSeq: $seq)
}
subscription TypingsWatch {
    typings {
        conversation: chat {
            ... on PrivateRoom {
                id
            }
            ... on SharedRoom {
                id
            }
        }
        user {
            id
            photo
            firstName
        }
        cancel
        type
    }
}
subscription ChatOnlinesCountWatch($chatId: ID!) {
    chatOnlinesCount(chatId: $chatId) {
        onlineMembers
    }
}
mutation UpdateWelcomeMessage(
    $roomId: ID!
    $welcomeMessageIsOn: Boolean!
    $welcomeMessageSender: ID
    $welcomeMessageText: String
) {
    updateWelcomeMessage(
        roomId: $roomId
        welcomeMessageIsOn: $welcomeMessageIsOn
        welcomeMessageSender: $welcomeMessageSender
        welcomeMessageText: $welcomeMessageText
    )
}
query Message($messageId: ID!) {
    message(messageId: $messageId) {
        ...FullMessage
    }
}
query MessagesSearch($query: String!, $sort: String, $first: Int!, $after: String) {
    messagesSearch(query: $query, sort: $sort, first: $first, after: $after) {
        edges {
            node {
                chat {
                    ... on PrivateRoom {
                        id
                        user {
                            id
                            name
                            photo
                        }
                        settings {
                            id
                            mute
                        }
                    }
                    ... on SharedRoom {
                        id
                        kind
                        title
                        membership
                        isChannel
                        role
                        canEdit
                        photo
                        settings {
                            id
                            mute
                        }
                    }
                }
                message {
                    id
                    date
                    sender {
                        id
                        name
                        firstName
                        photo
                    }
                    senderBadge {
                        ...UserBadge
                    }
                    message
                    fallback
                    ... on GeneralMessage {
                        id
                        attachments {
                            id
                            fallback
                            ... on MessageAttachmentFile {
                                id
                                fileId
                                fileMetadata {
                                    isImage
                                    imageFormat
                                }
                            }
                        }
                        quotedMessages {
                            id
                        }
                    }
                }
            }
            cursor
        }
        pageInfo {
            hasNextPage
            hasPreviousPage
            itemsCount
            currentPage
            pagesCount
            openEnded
        }
    }
}
query ChatJoin($id: ID!) {
    room(id: $id) {
        ... on SharedRoom {
            id
            title
            description
            photo
            membersCount
            onlineMembersCount
            previewMembers {
                id
                photo
                name
            }
            isChannel
        }
    }
}
