// WARNING! THIS IS AUTOGENERATED FILE. DO NOT EDIT!

import { typedMutation } from 'openland-x-graphql/typed';
import { typedQuery } from 'openland-x-graphql/typed';
import * as Raw from './Sourcing';
import * as Types from '../Types';

export const SourcingQuery = typedQuery<Types.SourcingQuery, Types.SourcingQueryVariables>(Raw.SourcingQuery);
export const SourcingFirstQuery = typedQuery<Types.SourcingFirstQuery, Types.SourcingFirstQueryVariables>(Raw.SourcingFirstQuery);
export const SourcingAllQuery = typedQuery<Types.SourcingAllQuery, Types.SourcingAllQueryVariables>(Raw.SourcingAllQuery);
export const SourcingAllReportQuery = typedQuery<Types.SourcingAllReportQuery, Types.SourcingAllReportQueryVariables>(Raw.SourcingAllReportQuery);
export const ProspectingCapacityQuery = typedQuery<Types.ProspectingCapacityQuery, Types.ProspectingCapacityQueryVariables>(Raw.ProspectingCapacityQuery);
export const OpportunityQuery = typedQuery<Types.OpportunityQuery, Types.OpportunityQueryVariables>(Raw.OpportunityQuery);
export const OpportunityTileOverlayQuery = typedQuery<Types.OpportunityTileOverlayQuery, Types.OpportunityTileOverlayQueryVariables>(Raw.OpportunityTileOverlayQuery);
export const AddOpportunityMutation = typedMutation<Types.AddOpportunityMutation, Types.AddOpportunityMutationVariables>(Raw.AddOpportunityMutation);
export const ApproveOpportunityMutation = typedMutation<Types.ApproveOpportunityMutation, Types.ApproveOpportunityMutationVariables>(Raw.ApproveOpportunityMutation);
export const RejectOpportunityMutation = typedMutation<Types.RejectOpportunityMutation, Types.RejectOpportunityMutationVariables>(Raw.RejectOpportunityMutation);
export const SnoozeOpportunityMutation = typedMutation<Types.SnoozeOpportunityMutation, Types.SnoozeOpportunityMutationVariables>(Raw.SnoozeOpportunityMutation);
export const ResetOpportunityMutation = typedMutation<Types.ResetOpportunityMutation, Types.ResetOpportunityMutationVariables>(Raw.ResetOpportunityMutation);
export const AddOpportunityFromSearchMutation = typedMutation<Types.AddOpportunityFromSearchMutation, Types.AddOpportunityFromSearchMutationVariables>(Raw.AddOpportunityFromSearchMutation);
export const NextOpportunityQuery = typedQuery<Types.NextOpportunityQuery, Types.NextOpportunityQueryVariables>(Raw.NextOpportunityQuery);
export const OpportunityStatsQuery = typedQuery<Types.OpportunityStatsQuery, Types.OpportunityStatsQueryVariables>(Raw.OpportunityStatsQuery);
export const OwnersQuery = typedQuery<Types.OwnersQuery, Types.OwnersQueryVariables>(Raw.OwnersQuery);