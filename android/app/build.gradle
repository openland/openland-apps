apply plugin: 'kotlin-kapt'
apply plugin: "com.android.application"
apply plugin: 'kotlin-android'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile      : "index.js",
        bundleAssetName: "index.android.bundle",
        inputExcludes  : ["android/**", "ios/**", "node_modules/**", "packages/openland-mac/node_modules/**"],
        bundleInRelease: true
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Hack for AppCenter
 */
if ("$System.env.CI" == "true") {
    buildDir = "./app/build/"
}

def appVersionCode = Integer.valueOf(System.env.BUILD_NUMBER ?: 1)

android {
    dexOptions {
        preDexLibraries = false
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.openland.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        versionCode appVersionCode
        versionName "1.1."+appVersionCode
        println("##teamcity[buildNumber '1.1.$appVersionCode']")
    }
    if(project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            if(project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations.all {
    resolutionStrategy {
        force 'org.webkit:android-jsc:r224109'
    }
    // exclude group: 'com.facebook.infer.annotation', module: 'infer-annotation'
    exclude group: 'com.facebook.yoga', module: 'yoga'
    // exclude group: 'com.facebook.litho', module: 'litho-annotations'
    // resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
}

dependencies {
    compile project(':react-native-incall-manager')
    compile project(':react-native-extra-dimensions-android')
    compile project(':react-native-document-picker')
    compile project(':react-native-webrtc')
    compile project(':react-native-android-open-settings')
    compile project(':react-native-auth0')
    compile project(':react-native-restart')
    def appCenterSdkVersion = '1.11.0'
    implementation "com.microsoft.appcenter:appcenter-distribute:${appCenterSdkVersion}"
    compile project(':appcenter-crashes')
    compile project(':appcenter-analytics')
    compile project(':appcenter')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.beust:klaxon:3.0.1'
    compile project(':react-native-share')
    compile project(':react-native-image-capinsets')
    implementation 'com.google.firebase:firebase-core:16.0.1'
    compile project(':react-native-haptic-feedback')
    compile project(':react-native-gesture-handler')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-blur')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-fast-image')
    compile project(':rn-fetch-blob')
    compile project(':react-native-image-picker')
    compile project(':react-native-device-info')
    compile project(':react-native-push-notification')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    compile "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    compile 'com.facebook.react:react-native:+'
    implementation 'com.facebook.litho:litho-core:0.23.0'
    implementation 'com.facebook.litho:litho-widget:0.23.0'
    implementation 'com.facebook.litho:litho-fresco:0.23.0'
    compileOnly 'com.facebook.litho:litho-annotations:0.23.0'
    kapt 'com.facebook.litho:litho-processor:0.23.0'
    annotationProcessor 'com.facebook.litho:litho-processor:0.23.0'
    implementation 'com.facebook.litho:litho-sections-core:0.23.0'
    implementation 'com.facebook.litho:litho-sections-widget:0.23.0'
    compileOnly 'com.facebook.litho:litho-sections-annotations:0.23.0'
    kapt 'com.facebook.litho:litho-sections-processor:0.23.0'
    annotationProcessor 'com.facebook.litho:litho-sections-processor:0.23.0'
    implementation 'com.eclipsesource.j2v8:j2v8:4.8.2@aar'

    implementation 'com.apollographql.apollo:apollo-runtime:0.5.0'
    implementation 'com.apollographql.apollo:apollo-android-support:0.5.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

//task bundleReleaseJsAndAssets(overwrite: true) {
//
//}

apply plugin: 'com.google.gms.google-services'